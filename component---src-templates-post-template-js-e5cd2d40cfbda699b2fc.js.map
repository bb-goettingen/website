{"version":3,"sources":["webpack:///./src/templates/postTemplate.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/seo.js","webpack:///./src/components/header.js","webpack:///./src/components/layout.js","webpack:///./src/components/uiElements.js","webpack:///./src/components/posts.js"],"names":["__webpack_require__","r","__webpack_exports__","d","Template","pageQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_helmet__WEBPACK_IMPORTED_MODULE_1__","_components_layout__WEBPACK_IMPORTED_MODULE_2__","_components_seo__WEBPACK_IMPORTED_MODULE_3__","_components_posts_js__WEBPACK_IMPORTED_MODULE_4__","_ref","markdownRemark","data","frontmatter","html","meta","draft","a","createElement","name","content","title","className","dangerouslySetInnerHTML","__html","generateMetaString","StaticQuery","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","StaticQueryContext","React","createContext","StaticQueryDataRenderer","staticQueryData","query","render","finalData","Fragment","props","children","Consumer","propTypes","PropTypes","object","string","isRequired","func","m","module","exports","require","default","ProdPageRenderer","location","pageResources","InternalPageRenderer","Object","assign","json","shape","pathname","SEO","description","lang","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","siteMetadata","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","defaultTitle","titleTemplate","property","author","concat","defaultProps","arrayOf","Header","siteTitle","react_default","gatsby_browser_entry","to","Layout","components_header","Date","getFullYear","_755544856","node","DotDivider","PostShort","image","excerpt","excerptLines","trim","replace","split","map","line","style","backgroundImage","path","fm","date","components_uiElements","authorExtra","PostList","_ref2","posts","edges","filter","edge","posts_PostShort","e","i","length","reduce","b"],"mappings":"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","file":"component---src-templates-post-template-js-e5cd2d40cfbda699b2fc.js","sourcesContent":["import React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { graphql } from \"gatsby\";\n\nimport Layout from \"../components/layout\";\nimport SEO from \"../components/seo\"\nimport { generateMetaString } from \"../components/posts.js\"\n\nimport \"./postTemplate.scss\"\n\nexport default function Template({ data }) {\n  const { markdownRemark } = data;\n  const { frontmatter, html } = markdownRemark;\n\n  let meta = \"\";\n  if(frontmatter.draft) {\n    meta = <meta name=\"robots\" content=\"noindex\" />;\n  }\n\n  return (\n    <Layout>\n      <Helmet>\n        {meta}\n      </Helmet>\n      <SEO title={frontmatter.title} />\n      <h1 className=\"post-heading\">\n        {frontmatter.title}\n      </h1>\n      <div className=\"post-content\" dangerouslySetInnerHTML={{ __html: html }}></div>\n      <span className=\"post-meta\">{generateMetaString(frontmatter)}</span>\n    </Layout>\n  );\n};\n\nexport const pageQuery = graphql`\n  query($path: String!) {\n    markdownRemark(frontmatter: { path: { eq: $path } }) {\n      html\n      frontmatter {\n        path\n        author\n        authorExtra\n        title\n        date(formatString: \"DD.MM.YYYY\")\n        draft\n      }\n    }\n  }\n`;\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      defaultTitle={site.siteMetadata.title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","import { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport React from \"react\"\n\nimport \"./header.scss\"\n\nconst Header = ({ siteTitle }) => (\n  <header className=\"header\">\n    <div>\n      <h1>\n        <Link to=\"/\">\n          {siteTitle}\n        </Link>\n      </h1>\n    </div>\n  </header>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's StaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { StaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"./header\"\nimport \"./layout.css\"\n\nconst Layout = ({ children }) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `}\n    render={data => (\n      <>\n        <Header siteTitle={data.site.siteMetadata.title} />\n        <main>{children}</main>\n        <footer>\n          © {new Date().getFullYear()}\n        </footer>\n      </>\n    )}\n  />\n)\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","import React from \"react\"\n\nimport \"./uiElements.scss\"\n\nconst DotDivider = () => {\n  return <span className=\"ui-dot-divider\"></span>;\n};\n\nexport default DotDivider;\n","import React from \"react\"\nimport { Link } from \"gatsby\"\n\nimport DotDivider from \"./uiElements.js\"\n\nimport \"./posts.scss\"\n\nconst PostShort = ({ node }) => {\n  const { excerpt, frontmatter } = node;\n  // /\\n+(?!#)/g : match new lines unless followed by a heading (#)\n  const excerptLines = excerpt.trim()\n                              .replace(/\\n+(?!#)/g, \"\\n\")\n                              .split(\"\\n\")\n                              .map(line => <>{line}<br /></>);\n  let image;\n  if(frontmatter.image && frontmatter.image !== \"\") {\n    image = <div className=\"post-short-image\" style={{ backgroundImage: `url(${frontmatter.image})` }} />;\n  }\n  return (\n    <Link to={frontmatter.path}>\n      <section className=\"post-short\">\n        <div className=\"post-short-content\">\n          <h2 className=\"post-short-heading\">{frontmatter.title}</h2>\n          <p className=\"post-short-excerpt\">{excerptLines}</p>\n          <span className=\"post-short-meta\">\n            {generateMetaString(frontmatter)}\n          </span>\n        </div>\n        {image}\n      </section>\n    </Link>\n  );\n};\n\nexport function generateMetaString(fm) {\n  return (\n    <>\n      {fm.date} <DotDivider /> {fm.author}\n      {fm.authorExtra && fm.authorExtra !== \"\" ? \" (\" + fm.authorExtra + \")\" : \"\"}\n    </>\n  );\n}\n\nconst PostList = ({ edges }) => {\n  const posts = edges.filter(edge => !edge.node.frontmatter.draft)\n                     .map(edge => <PostShort node={edge.node}/>)\n  return (\n    // Insert hr between elements\n    <div className=\"posts-container\">\n      {[...posts].map((e, i) => i < posts.length-1 ? [e, <hr className=\"posts-hr\" />] : [e])\n                 .reduce((a, b) => a.concat(b))}\n    </div>\n  );\n};\n\nexport default PostList;\n"],"sourceRoot":""}